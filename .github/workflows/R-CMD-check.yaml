# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master]
  pull_request:

name: R-CMD-check.yaml

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest,   r: 'release'}
          - {os: macos-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install system deps on Linux (e.g. JAGS, SSL, PROJ, GDAL)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            jags \
            libssl-dev \
            libudunits2-dev \
            libproj-dev \
            libgeos-dev \
            libgdal-dev \
            python3-dev

      - name: Install system deps on macOS (e.g. JAGS + SSL + UDUNITS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install \
            jags \
            openssl@3 \
            udunits

          # 1) Tell R where to find OpenSSL & UDUNITS at compile time
          export PKG_CONFIG_PATH="$(brew --prefix openssl@3)/lib/pkgconfig:\
          $(brew --prefix udunits)/lib/pkgconfig:$PKG_CONFIG_PATH"
          export LDFLAGS="-L$(brew --prefix openssl@3)/lib \
          -L$(brew --prefix udunits)/lib $LDFLAGS"
          export CPPFLAGS="-I$(brew --prefix openssl@3)/include \
          -I$(brew --prefix udunits)/include $CPPFLAGS"

          # 2) Symlink JAGS into /usr/local so rjags can find it
          JAGS_PREFIX="$(brew --prefix jags)"
          sudo mkdir -p /usr/local/lib /usr/local/include/JAGS /usr/local/lib/JAGS
          sudo ln -sfn "$JAGS_PREFIX/lib/libjags.4.dylib" /usr/local/lib/libjags.4.dylib
          sudo ln -sfn "$JAGS_PREFIX/include/JAGS"          /usr/local/include/JAGS
          sudo ln -sfn "$JAGS_PREFIX/lib/JAGS/modules-4"    /usr/local/lib/JAGS/modules-4

          # Sanity check
          ls -l /usr/local/lib/JAGS/modules-4

      - name: Install Python 3.12 (arm64) on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install python@3.12
          # ensure this python comes first
          echo "$(brew --prefix python@3.12)/bin" >> $GITHUB_PATH
          # tell reticulate to use it
          echo "RETICULATE_PYTHON=$(brew --prefix python@3.12)/bin/python3" >> $GITHUB_ENV

      - name: Set up Miniforge (Conda)
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: false
          miniforge-version: "latest"

      # Install R dependencies
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: pak
          extra-packages: any::rcmdcheck

      # Test local build
      - name: Build source tarball
        if: runner.os == 'Windows'
        shell: bash
        run: R CMD build . --no-manual

      - name: Build source tarball
        if: runner.os != 'Windows'
        run: R CMD build . --no-manual

      - name: Install MOSAIC from tarball
        run: R CMD INSTALL MOSAIC_*.tar.gz

      - name: Smoke-load MOSAIC
        run: Rscript -e 'library(MOSAIC)'

      # Test remote install
      - name: Install remotes (if missing)
        run: Rscript -e 'if (!requireNamespace("remotes", quietly=TRUE)) install.packages("remotes")'

      - name: Install MOSAIC from GitHub
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Rscript -e 'remotes::install_github(
            repo       = Sys.getenv("GITHUB_REPOSITORY"),
            ref        = "main",
            dependencies = FALSE,
            upgrade      = "never"
          )'
          Rscript -e 'library(MOSAIC)'

      # Test MOSAIC setup
      - name: Clean old virtualenv
        run: |
          Rscript -e "if (reticulate::virtualenv_exists('r-mosaic')) reticulate::virtualenv_remove('r-mosaic')"

      - name: Install MOSAIC Python deps
        if: runner.os != 'macOS'
        run: Rscript -e 'MOSAIC::install_dependencies(force=TRUE)'

      - name: Check MOSAIC Python deps
        run: Rscript -e 'MOSAIC::check_dependencies()'
