% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_log_likelihood_distributions.R
\name{calc_log_likelihood_beta}
\alias{calc_log_likelihood_beta}
\title{Calculate log-likelihood for Beta-distributed proportions}
\usage{
calc_log_likelihood_beta(
  observed,
  estimated,
  mean_precision = TRUE,
  weights = NULL,
  verbose = TRUE
)
}
\arguments{
\item{observed}{Numeric vector of observed values in (0, 1).}

\item{estimated}{Numeric vector of model-predicted values in (0, 1).}

\item{mean_precision}{Logical; if \code{TRUE} (default), use mean–precision parameterization.
If \code{FALSE}, estimate shape parameters directly from the observed vector.}

\item{weights}{Optional numeric vector of non-negative weights, same length as \code{observed}.
Default is \code{NULL}, which sets all weights to 1.}

\item{verbose}{Logical; if \code{TRUE}, prints shape parameter estimates and total log-likelihood.}
}
\value{
A scalar log-likelihood (numeric).
}
\description{
Computes the total log-likelihood for proportion data under the Beta distribution.
Supports either the mean–precision parameterization (default) or the standard
shape parameterization. In both cases, a single global set of shape parameters is
estimated from the data using the method of moments. Each observation can be
weighted via \code{weights}.
}
\details{
When \code{mean_precision = TRUE}, the precision parameter \eqn{\phi} is estimated as:
\deqn{
\phi = \frac{\mu (1 - \mu)}{\text{Var}(Y)} - 1
}
Then:
\deqn{
\text{shape}_1 = \mu_t \phi, \quad \text{shape}_2 = (1 - \mu_t) \phi
}

When \code{mean_precision = FALSE}, a single global \eqn{\text{shape}_1}, \eqn{\text{shape}_2}
is estimated from the observed vector:
\deqn{
\text{shape}_1 = \left( \frac{1 - \mu}{\sigma^2} - \frac{1}{\mu} \right) \mu^2
}
\deqn{
\text{shape}_2 = \text{shape}_1 \left( \frac{1}{\mu} - 1 \right)
}

The total log-likelihood is then summed across observations, each multiplied by \code{weights[i]}.
}
\examples{
calc_log_likelihood_beta(c(0.2, 0.6, 0.4), c(0.25, 0.55, 0.35))
}
