% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_log_mean_exp.R
\name{calc_log_mean_exp}
\alias{calc_log_mean_exp}
\title{Stable log-mean-exp computation}
\usage{
calc_log_mean_exp(x)
}
\arguments{
\item{x}{Numeric vector of log-values}
}
\value{
Numeric scalar; the log-mean-exp of the input vector
}
\description{
Computes the log of the mean of exponentials in a numerically stable way.
This is equivalent to log(mean(exp(x))) but avoids numerical overflow/underflow
by subtracting the maximum value before exponentiation.
}
\section{Details}{

The log-mean-exp for a vector \eqn{x} is computed as:
\deqn{ \mathrm{LME}(x) = \max(x) + \log\left(\frac{1}{|x|}\sum_i e^{x_i - \max(x)}\right) }

This is numerically stable because:
\itemize{
\item The maximum value is subtracted before exponentiation, preventing overflow
\item At least one exponentiated term equals 1, preventing underflow
\item Equivalent to \code{log(mean(exp(x)))} but without numerical issues
}
}

\examples{
# Basic usage
x <- c(-100, -101, -99)
calc_log_mean_exp(x)  # â‰ˆ -99.59

# Compare with naive approach (which would overflow for large negative values)
log(mean(exp(x)))     # Same result, but less stable

# With missing/infinite values
calc_log_mean_exp(c(-50, -Inf, -60, NA))  # Returns log-mean-exp of finite values

# Empty or all non-finite input
calc_log_mean_exp(c())           # Returns NA
calc_log_mean_exp(c(-Inf, NA))   # Returns NA

}
\seealso{
\code{\link[=calc_model_collapse_iterations]{calc_model_collapse_iterations()}} which uses this for likelihood aggregation
}
\concept{utility-functions}
