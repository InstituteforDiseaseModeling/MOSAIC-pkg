% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_affine_normalization.R
\name{check_affine_normalization}
\alias{check_affine_normalization}
\title{Check Affine Normalization (Zero-Centered Min-Max Scaling)}
\usage{
check_affine_normalization(x, verbose = FALSE)
}
\arguments{
\item{x}{A numeric vector that has been affine normalized. This vector may contain \code{NA} values.}

\item{verbose}{Logical; if \code{TRUE}, the function prints details of the check to the console.}
}
\value{
Invisibly returns \code{NULL} if the check passes. Otherwise, the function stops
with an error message detailing the failed condition(s).
}
\description{
Verifies that a numeric vector has been affine normalized such that it is
zero-centered and its minimum value is at least \code{-1}. Specifically, the function checks that:
}
\details{
\itemize{
\item The mean of the vector (ignoring \code{NA}s) is approximately zero.
\item The minimum value (ignoring \code{NA}s) is greater than or equal to \code{-1}.
\item The maximum value (ignoring \code{NA}s) is above zero.
}

If any of these conditions fail, the function stops execution and returns an
informative error message.

The check uses a tolerance of \code{1e-8} to account for floating point precision.
The conditions verified correspond to a transformation defined as:

\deqn{scaled = \frac{x - \mu}{\mu - \min(x)}}

where \eqn{\mu} is the mean of \code{x} computed with \code{na.rm = TRUE}. Note that
while the transformation forces a zero-centered result, the minimum value need not be
exactly \code{-1} but should be no less than \code{-1}.
}
\examples{
# Example vector after affine normalization
x <- c(-1, 0, 0.5, 1.2, NA)

# Check without printing details:
\dontrun{
  check_affine_normalization(x)
}

# Check with verbose output:
\dontrun{
  check_affine_normalization(x, verbose = TRUE)
}

}
