% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert_config_to_matrix.R
\name{convert_config_to_matrix}
\alias{convert_config_to_matrix}
\title{Convert Config to Numeric Vector for Matrix Storage}
\usage{
convert_config_to_matrix(config)
}
\arguments{
\item{config}{A configuration list object in the format of MOSAIC::config_default.
The config object should contain both global parameters (scalars) and
location-specific parameters (vectors/lists).}
}
\value{
A named numeric vector where:
\itemize{
\item All parameter values are converted to numeric representation
\item Logical values become 0 (FALSE) or 1 (TRUE)
\item Character values are converted to NA with a warning
\item Vector parameters are expanded with appropriate suffixes
\item Names preserve the parameter structure for later reconstruction
}
}
\description{
Converts a complex MOSAIC config list object directly into a numeric vector
suitable for storage in a matrix. This function is optimized for calibration
workflows where parameters need to be stored efficiently in pre-allocated matrices.
}
\details{
This function is more efficient than \code{convert_config_to_dataframe()} when
the goal is to store parameters in a numeric matrix, as it avoids the overhead
of creating an intermediate data.frame. It processes parameters directly into
a numeric vector while maintaining the same naming convention.

The function handles:
\itemize{
\item Scalar parameters: Direct numeric conversion
\item Location-specific vectors: Expanded with location suffixes
\item Node-level parameters: Expanded with numeric indices
\item Logical values: Converted to 0/1
\item NULL values: Skipped
\item Non-numeric values: Converted to NA with warning
}
}
\examples{
\dontrun{
# Convert sampled config for matrix storage
config_sampled <- sample_parameters(PATHS, seed = 123)
vec_params <- convert_config_to_matrix(config_sampled)

# Use in calibration workflow
n_sim <- 100
n_params <- length(vec_params)
results_matrix <- matrix(NA_real_, nrow = n_sim, ncol = 4 + n_params)
results_matrix[1, 5:ncol(results_matrix)] <- vec_params

# Compare with dataframe approach (slower)
df_params <- convert_config_to_dataframe(config_sampled)
vec_params_slow <- as.numeric(df_params)
all.equal(vec_params, vec_params_slow)  # Should be TRUE
}
}
\seealso{
\code{\link{convert_config_to_dataframe}} for data.frame output
}
