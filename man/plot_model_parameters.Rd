% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_model_parameters.R
\name{plot_model_parameters}
\alias{plot_model_parameters}
\title{Plot Model Parameters vs Likelihood}
\usage{
plot_model_parameters(results, output_dir, verbose = TRUE)
}
\arguments{
\item{results}{A data frame containing calibration results with columns for
parameters, likelihood values, and simulation identifiers (sim, iter, seed).
This is typically the output from a model calibration run. The function
will automatically infer the number of simulations and iterations from
the data.}

\item{output_dir}{Character string specifying the directory where plots should
be saved. Directory will be created if it doesn't exist.}

\item{verbose}{Logical indicating whether to print messages. Default is TRUE.}
}
\value{
Invisibly returns a list containing the plot objects:
\itemize{
\item \code{global}: ggplot object for global parameters
\item \code{location}: Named list of ggplot objects for each location
}
}
\description{
Creates faceted plots showing the relationship between model parameters and
likelihood values from calibration results. Generates separate plots for
global and location-specific parameters.
}
\details{
This function creates publication-quality faceted plots showing how each
parameter relates to the model likelihood. Points are colored by density,
with a LOESS smooth curve showing the trend. The best parameter value
(highest likelihood) is highlighted with a red point.

The function automatically:
\itemize{
\item Separates global and location-specific parameters
\item Categorizes parameters by type (epidemiological, environmental, etc.)
\item Creates separate plots for each location found in the data
\item Saves plots as PDF files in the specified output directory
}
}
\examples{
\dontrun{
# Run calibration and collect results
results <- run_calibration()

# Create plots (automatically infers n_sim and n_iter from results)
plots <- plot_model_parameters(results, output_dir = "calibration_output")

# Access individual plots
print(plots$global)
print(plots$location[["ETH"]])
}

}
