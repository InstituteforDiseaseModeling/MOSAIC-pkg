% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_list_to_obj.R
\name{write_list_to_obj}
\alias{write_list_to_obj}
\title{Write an R List to a Python-Compatible Object}
\usage{
write_list_to_obj(data_list, file_path, compress = FALSE)
}
\arguments{
\item{data_list}{A named list containing the data to write.}

\item{file_path}{A character string specifying the full file path for the output \code{.obj} or \code{.obj.gz} file.}

\item{compress}{Logical. If TRUE, the file is saved as a gzip-compressed \code{.obj.gz} file. Default is FALSE.}
}
\value{
This function does not return a value. It prints a message indicating that the file was successfully written.
}
\description{
Takes a named R list and writes it to a Python-compatible \code{.obj} or \code{.obj.gz} file, preserving dictionary-like structure.
}
\details{
This function converts the R list to a Python-compatible dictionary using \code{reticulate::r_to_py()} and writes it to a \code{.obj}
or \code{.obj.gz} file using \code{sciris.sc.save()}. Since the virtual Python environment is already activated via \code{.onAttach()},
the function assumes that the correct environment is in use.

The function leverages \code{sciris.sc.save()} for file storage. Full documentation for \code{sciris.sc.save()} can be found here:
\href{https://docs.sciris.org/en/latest/api/_autosummary/sciris.sc_fileio.save.html}{Sciris save() documentation}
}
\examples{
\dontrun{
  sample_data <- list(
    group1 = list(
      value1 = rnorm(100),
      value2 = runif(100)
    ),
    group2 = list(
      message = "Hello, MOSAIC!",
      timestamp = Sys.time()
    )
  )

  # Write to an uncompressed Python-compatible object file.
  output_file <- "output.obj"
  write_list_to_obj(data_list = sample_data, file_path = output_file, compress = FALSE)

  # Write to a compressed Python-compatible object file.
  output_file_gz <- "output.obj.gz"
  write_list_to_obj(data_list = sample_data, file_path = output_file_gz, compress = TRUE)

  # Load in Python:
  # import sciris as sc
  # params = sc.load('output.obj.gz')
  # print(params)
}

}
